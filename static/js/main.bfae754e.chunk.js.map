{"version":3,"sources":["components/Card.js","components/CardList.js","components/robots.js","components/Scroll.js","components/SearchBox.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","username","Scroll","props","style","overflowY","border","height","children","SearchBox","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","searchfield","target","value","state","filteredRobots","this","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAaeA,EAZH,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,GAEzB,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,6BACE,4BAAKF,GACL,2BAAIC,MCaGK,EAnBA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACf,OACE,6BAEEA,EAAOC,KAAI,SAACC,EAAKC,GACf,OACA,kBAAC,EAAD,CACEC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCZdM,EAAS,CACpB,CACEL,GAAI,EACJF,KAAM,cACNY,SAAU,UACVX,MAAO,mBAET,CACEC,GAAI,EACJF,KAAM,aACNY,SAAU,SACVX,MAAO,uBAET,CACEC,GAAI,EACJF,KAAM,iBACNY,SAAU,QACVX,MAAO,oBAET,CACEC,GAAI,EACJF,KAAM,gBACNY,SAAU,QACVX,MAAO,yBAET,CACEC,GAAI,EACJF,KAAM,iBACNY,SAAU,SACVX,MAAO,wBAET,CACEC,GAAI,EACJF,KAAM,cACNY,SAAU,OACVX,MAAO,8BAET,CACEC,GAAI,EACJF,KAAM,gBACNY,SAAU,QACVX,MAAO,4BAET,CACEC,GAAI,EACJF,KAAM,aACNY,SAAU,SACVX,MAAO,oBAET,CACEC,GAAI,EACJF,KAAM,cACNY,SAAU,SACVX,MAAO,uBAET,CACEC,GAAI,GACJF,KAAM,oBACNY,SAAU,SACVX,MAAO,yBAET,CACEC,GAAI,GACJF,KAAM,eACNY,SAAU,QACVX,MAAO,qBAET,CACEC,GAAI,GACJF,KAAM,cACNY,SAAU,SACVX,MAAO,sBC/DIY,EAPF,SAACC,GACZ,OACE,yBAAKC,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAmBC,OAAQ,UAC/DJ,EAAMK,WCSEC,EAZC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aAChB,OACE,yBAAKlB,UAAU,OACb,2BACAA,UAAU,mCACVmB,KAAK,SACLC,YAAY,eACZC,SAAUH,MCuCDI,G,wDAvCb,aAAc,IAAD,8BACX,gBAcFC,eAAe,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAdzC,EAAKC,MAAM,CACTzB,OAAOA,EACPsB,YAAY,IAJH,E,qDAmBJ,IAAD,OACAI,EAAeC,KAAKF,MAAMzB,OAAO4B,QAAO,SAAAC,GAC5C,OAAOA,EAAMpC,KAAKqC,cAAcC,SAAS,EAAKN,MAAMH,YAAYQ,kBAElE,OAA8B,IAA3BH,KAAKF,MAAMzB,OAAOgC,OACZ,uCAIT,yBAAKpC,UAAU,MACb,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWkB,aAAca,KAAKR,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUnB,OAAQ0B,U,GAjCRO,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OAAO,kBAAC,EAAD,MAAOC,SAASC,eAAe,SDyHzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.bfae754e.chunk.js","sourcesContent":["import React from 'react';\r\nconst Card =({name ,email ,id })=>{\r\n\r\n  return(\r\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`}/>\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList=({robots})=>{\r\n  return(\r\n    <div>\r\n    {\r\n      robots.map((user,i)=>{\r\n        return (\r\n        <Card\r\n          key={i}\r\n          id={robots[i].id}\r\n          name={robots[i].name}\r\n          email={robots[i].email}\r\n        />\r\n      );\r\n      })\r\n    }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","export const robots = [\r\n  {\r\n    id: 1,\r\n    name: 'Yash Jadhav',\r\n    username: 'yashleo',\r\n    email: 'leo10@gmail.com'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Jay Kamble',\r\n    username: 'Jayaoo',\r\n    email: 'Jayanchal@gmail.com'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Chinmay Jangle',\r\n    username: 'Jannu',\r\n    email: 'Janmay@gmail.com'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Prajwal Patil',\r\n    username: 'Pajya',\r\n    email: 'SinglePatil@gmail.com'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Saurabh Magdum',\r\n    username: 'Souabb',\r\n    email: 'souabbdada@gmail.com'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Amey Chavan',\r\n    username: 'Noob',\r\n    email: 'AIDASpecialist@builder.com'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Tejas Kachare',\r\n    username: 'Tejya',\r\n    email: 'tejasdada@ranuMondal.com'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'S Abhishek',\r\n    username: 'Sabhya',\r\n    email: 'sabhya@gmail.com'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Satyam Tate',\r\n    username: 'barrel',\r\n    email: 'shinigami@gmail.com'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Prathamesh Gosavi',\r\n    username: 'Goshya',\r\n    email: 'englishkida@gmail.com'\r\n  },\r\n  {\r\n    id: 11,\r\n    name: 'Aditya Patil',\r\n    username: 'Aadya',\r\n    email: 'harkesh@gmail.com'\r\n  },\r\n  {\r\n    id: 12,\r\n    name: 'Gaurav Mali',\r\n    username: 'Tirkya',\r\n    email: 'balcony@gmail.com'\r\n  }\r\n\r\n];\r\n","import React from 'react';\r\nconst Scroll=(props)=>{\r\n  return(\r\n    <div style={{overflowY:'scroll',border:'1px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\nexport default Scroll;\r\n","import React from 'react';\r\nconst SearchBox=({searchChange})=>{\r\n  return(\r\n    <div className='pa2'>\r\n      <input\r\n      className='pa3 ba b--green bg-lightest-blue'\r\n      type='search'\r\n      placeholder='search robot'\r\n      onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default SearchBox;\r\n","import React,{Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport {robots} from '../components/robots';\r\nimport Scroll from '../components/Scroll';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n  constructor(){\r\n    super()\r\n    this.state={\r\n      robots:robots,\r\n      searchfield:''\r\n    }\r\n  }\r\n  // componentDidMount(){\r\n  //   fetch('https://jsonplaceholder.typicode.com/users')\r\n  //     .then(response=>response.json())\r\n  //     .then(users=>this.setState({robots:users}));\r\n  //\r\n  //\r\n  // }\r\n\r\n  onSearchChange=(event)=>{\r\n    this.setState({searchfield: event.target.value})\r\n  }\r\n\r\n  render(){\r\n    const filteredRobots=this.state.robots.filter(robot=>{\r\n      return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n    })\r\n    if(this.state.robots.length===0){\r\n      return <h1>Loading</h1>\r\n    }\r\n    else{\r\n    return(\r\n    <div className='tc'>\r\n      <h1 className='f1'>Robo Friends</h1>\r\n      <SearchBox searchChange={this.onSearchChange}/>\r\n      <Scroll>\r\n        <CardList robots={filteredRobots}/>\r\n      </Scroll>\r\n    </div>\r\n);\r\n}\r\n}\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n// import registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App/>,document.getElementById('root'));\n// <React.StrictMode>\n//   <Hello greetings={'Hello'+' React Ninja'} />\n// </React.StrictMode>,\n// ReactDOM.render(<h1>hello World</h1>, document.getElementById('root'));\n// registerServiceWorker();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}